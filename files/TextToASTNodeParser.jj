 /**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  static = false;}PARSER_BEGIN(TextToASTNodeParser)package org.sbml.jsbml.xml.test;import org.sbml.jsbml.*;public class TextToASTNodeParser{  private MathContainer container;  public static void main(String args []) throws ParseException  {    try    {      Model m = new Model("test", 2, 4);      m.createFunctionDefinition("f");      m.createRateRule();      while (true)      {        TextToASTNodeParser parser = new TextToASTNodeParser(System.in);        System.out.println("Reading from standard input...");        System.out.print("Enter an expression like \"1+(2+3)*4;\" :");        ASTNode node = parser.Parse(m.getRule(0));        System.out.println(node.toLaTeX());      }    }    catch (Exception e)    {      e.printStackTrace();    }  }}PARSER_END(TextToASTNodeParser)SKIP :{  " "| "\t"}TOKEN :{  < NUMBER :    ([ "0"-"9" ])+    (      "." ([ "0"-"9" ])+    )? >}TOKEN :{  < POTENCYNUMBER : < NUMBER > "^" ([ "0"-"9" ])+ >}TOKEN :{  < EXPNUMBER : < NUMBER > [ "E", "e" ] ([ "0"-"9" ])+ >}TOKEN :{  < FUNCTION :    ([ "a"-"z", "A"-"Z" ])+ "("    (      ([ "a"-"z", "A"-"Z", " " ])+ [ "," ]    )+    ([ "a"-"z", "A"-"Z", " " ])+ ")" >}TOKEN :{  < PLUS : "+" >}TOKEN :{  < MINUS : "-" >}TOKEN :{  < TIMES : "*" >}TOKEN :{  < DIVIDE : "/" >}TOKEN :{  < OPEN_PAR : "(" >}TOKEN :{  < CLOSE_PAR : ")" >}TOKEN :{  < EOL :    "\n"  | "\r" >}ASTNode Parse(MathContainer container) :{  ASTNode node = null;  this.container = container;}{  node = Expression()  {    return node;  }}ASTNode Expression() :{  ASTNode value = null;}{  value = Expr()  (    < EOF >  | < EOL >  )  {    return value;  }}ASTNode Term() :{  ASTNode i;  ASTNode value;  ASTNode node = null;}{  value = Primary()  (    < TIMES > i = Primary()    {      node = new ASTNode('*', container);      node.addChild(value);      node.addChild(i);      value = node;    }  | < DIVIDE > i = Primary()    {      if (value.isInteger() && i.isInteger())      {        node = new ASTNode(container);        node.setValue(value.getInteger(), i.getInteger());
        value = node;      }      else      {        node = new ASTNode('/', container);        node.addChild(value);        node.addChild(i);        value = node;      }    }  )*  {    return value;  }}ASTNode Expr() :{  ASTNode i;  ASTNode value;  ASTNode node = null;}{  value = Term()  (    < PLUS > i = Term()    {      node = new ASTNode('+', container);      node.addChild(value);      node.addChild(i);      value = node;    }  | < MINUS > i = Term()    {      node = new ASTNode('-', container);      node.addChild(value);      node.addChild(i);      value = node;    }  )*  {    return value;  }}ASTNode Primary() throws NumberFormatException :{  Token t;  double d;  int i;  ASTNode node = new ASTNode(container);  String s;  String vals [ ];}{  t = < NUMBER >  {    try    {      i = Integer.parseInt(t.image);      node.setValue(i);    }    catch (NumberFormatException e)    {      d = Double.parseDouble(t.image);      node.setValue(d);    }    return node;  }| t = < POTENCYNUMBER >  {    s = t.image;    vals = s.toLowerCase().split("\\^");    ASTNode left = new ASTNode(container), right = new ASTNode(container);    node = new ASTNode("power", container);    left.setValue(Double.parseDouble(vals [ 0 ]));    right.setValue(Double.parseDouble(vals [ 1 ]));    node.addChild(left);    node.addChild(right);    return node;  }| t = < EXPNUMBER >  {    s = t.image;    vals = s.toLowerCase().split("e");    node.setValue(Double.parseDouble(vals [ 0 ]), Integer.parseInt(vals [ 1 ]));    return node;  }| t = < FUNCTION >  {    s = t.image;    String name;    s.substring(0, s.length() - 2);    vals = s.split("\\(");    name = vals [ 0 ];    node = new ASTNode(name, container);    vals = vals [ 1 ].split(",");    for (int j = 0; j < vals.length; j++)    {      node.addChild(new ASTNode(vals [ j ].trim(), container));    }    return node;  }| < OPEN_PAR > node = Expr() < CLOSE_PAR >  {    return node;  }| < MINUS > node = Primary()  {    ASTNode uiMinus = new ASTNode('-', container);    uiMinus.addChild(node);    return uiMinus;  }}
