 /**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  static = false;}PARSER_BEGIN(TextToASTNodeParser)package org.sbml.jsbml.text.parser;import org.sbml.jsbml.*;import javax.swing.JDialog;import javax.swing.JScrollPane;import javax.swing.JTree;import javax.swing.UnsupportedLookAndFeelException;import java.util.ArrayList;public class TextToASTNodeParser{  private MathContainer container;  public static void main(String args []) throws ParseException  {    try    {      Model m = new Model("test", 2, 4);      m.createFunctionDefinition("f");      m.createRateRule();      while (true)      {        TextToASTNodeParser parser = new TextToASTNodeParser(System.in);        System.out.println("Reading from standard input...");        System.out.print("Enter an expression like \"1+(2+3)*4;\" :");        ASTNode node = parser.Parse(m.getRule(0));        System.out.println(node.toLaTeX());        /*        JDialog d = new JDialog();        d.setTitle("Node output");        d.setModal(true);        d.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);        JTree tree = new JTree(node);        d.getContentPane().add(        new JScrollPane(tree,         JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,         JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED));        d.pack();        d.setLocationRelativeTo(null);        d.setVisible(true);*/      }    }    catch (Exception e)    {      e.printStackTrace();    }  }  void mustBeEmpty(ArrayList < ASTNode > arguments) throws ParseException  {    if (!arguments.isEmpty())    {      throw new ParseException();    }  }}PARSER_END(TextToASTNodeParser)SKIP :{  " "| "\t"}TOKEN :{  < NUMBER :    ([ "0"-"9" ])+    (      "." ([ "0"-"9" ])+    )?  | "." ([ "0"-"9" ])+ >}TOKEN :{  < INTEGER : ([ "0"-"9" ])+ >}TOKEN :{  < EXPNUMBER : < NUMBER > [ "E", "e" ] ([ "+", "-" ])? < INTEGER > >}TOKEN :{  < STRING :    ([ "a"-"z", "A"-"Z" ])+ ([ "a"-"z", "A"-"Z", "0"-"9" ])*  | ([ "0"-"9" ])+ ([ "a"-"z", "A"-"Z" ]) ([ "a"-"z", "A"-"Z", "0"-"9" ])* >}TOKEN :{  < SLPITTER : [ "," ] >}TOKEN :{  < PLUS : "+" >}TOKEN :{  < POWER : "^" >}TOKEN :{  < MINUS : "-" >}TOKEN :{  < TIMES : "*" >}TOKEN :{  < DIVIDE : "/" >}TOKEN :{  < OPEN_PAR : "(" >}TOKEN :{  < CLOSE_PAR : ")" >}TOKEN :{  < EOL :    "\n"  | "\r" >}ASTNode Parse(MathContainer container) :{  ASTNode node = null;  this.container = container;}{  node = Expression()  {    return node;  }}ASTNode Expression() :{  ASTNode value = null;}{  value = TermLvl1()  (    < EOF >  | < EOL >  )  {    return value;  }}ASTNode TermLvl3() :{  ASTNode i;  ASTNode value;  ASTNode node = null;}{  value = Primary()  (    < POWER > i = Primary()    {      node = new ASTNode(ASTNode.Type.POWER, container);      node.addChild(value);      node.addChild(i);      value = node;    }  )*  {    return value;  }}ASTNode TermLvl2() :{  ASTNode i;  ASTNode value;  ASTNode node = null;}{  value = TermLvl3()  (    < TIMES > i = TermLvl3()    {      node = new ASTNode('*', container);      node.addChild(value);      node.addChild(i);      value = node;    }  | < DIVIDE > i = TermLvl3()    {      if (value.isInteger() && i.isInteger())      {        node = new ASTNode(container);        node.setValue(value.getInteger(), i.getInteger());        value = node;      }      else      {        node = new ASTNode('/', container);        node.addChild(value);        node.addChild(i);        value = node;      }    }  )*  {    return value;  }}ASTNode TermLvl1() :{  ASTNode i;  ASTNode value;  ASTNode node = null;}{  value = TermLvl2()  (    < PLUS > i = TermLvl2()    {      node = new ASTNode('+', container);      node.addChild(value);      node.addChild(i);      value = node;    }  | < MINUS > i = TermLvl2()    {      node = new ASTNode('-', container);      node.addChild(value);      node.addChild(i);      value = node;    }  )*  {    return value;  }}ASTNode Primary() throws NumberFormatException :{  Token t;  double d;  int i;  ASTNode node = new ASTNode(container);  ASTNode child, furtherChild;  String s;  String vals [ ];  ArrayList < ASTNode > arguments = new ArrayList < ASTNode > ();}{  t = < NUMBER >  {    d = Double.parseDouble(t.image);    node.setValue(d);    return node;  }| t = < INTEGER >  {    i = Integer.parseInt(t.image);    node.setValue(i);    return node;  }| t = < EXPNUMBER >  {    s = t.image;    System.out.println(s);    vals = s.toLowerCase().split("e");    if (vals [ 1 ].startsWith("+"))    {      i = Integer.parseInt(vals [ 1 ].substring(1));    }    else    {      i = Integer.parseInt(vals [ 1 ]);    }    node.setValue(Double.parseDouble(vals [ 0 ]), i);    return node;  }| LOOKAHEAD(2)  t = < STRING > < OPEN_PAR > child = TermLvl1()  (    < SLPITTER > furtherChild = TermLvl1()    {      arguments.add(furtherChild);    }  )*  < CLOSE_PAR >  {    s = t.image;    if (s.toLowerCase().equals("abs"))    {      node = new ASTNode(ASTNode.Type.FUNCTION_ABS, container);      node.addChild(child);    }    else if (s.equalsIgnoreCase("sin"))    {      node = new ASTNode(ASTNode.Type.FUNCTION_SIN, container);      node.addChild(child);    }    else if (s.equalsIgnoreCase("cos"))    {      node = new ASTNode(ASTNode.Type.FUNCTION_COS, container);      node.addChild(child);    }    else if (s.equalsIgnoreCase("tan"))    {      node = new ASTNode(ASTNode.Type.FUNCTION_TAN, container);      node.addChild(child);    }    else if (s.equalsIgnoreCase("asin"))    {      node = new ASTNode(ASTNode.Type.FUNCTION_ARCSIN, container);      node.addChild(child);    }    else if (s.equalsIgnoreCase("acos"))    {      node = new ASTNode(ASTNode.Type.FUNCTION_ARCCOS, container);      node.addChild(child);    }    else if (s.equalsIgnoreCase("atan"))    {      node = new ASTNode(ASTNode.Type.FUNCTION_ARCTAN, container);      node.addChild(child);    }    else if (s.equalsIgnoreCase("ceil"))    {      node = new ASTNode(ASTNode.Type.FUNCTION_CEILING, container);      node.addChild(child);    }    else if (s.equalsIgnoreCase("floor"))    {      node = new ASTNode(ASTNode.Type.FUNCTION_FLOOR, container);      node.addChild(child);    }    else if (s.equalsIgnoreCase("log"))    {      node = new ASTNode(ASTNode.Type.FUNCTION_LN, container);      node.addChild(child);    }    else if (s.equalsIgnoreCase("log10"))    {      node = new ASTNode(ASTNode.Type.FUNCTION_LOG, container);      node.addChild(child);    }    else if (s.equalsIgnoreCase("pow"))    {      node = new ASTNode(ASTNode.Type.FUNCTION_POWER, container);      node.addChild(child);    }    else if (s.equalsIgnoreCase("sqr"))    {      mustBeEmpty(arguments);      node = new ASTNode(ASTNode.Type.FUNCTION_POWER, container);      node.addChild(child);      node.addChild(new ASTNode(2, container));    }    else if (s.equalsIgnoreCase("sqrt"))    {      mustBeEmpty(arguments);      node = new ASTNode(ASTNode.Type.FUNCTION_ROOT, container);      node.addChild(new ASTNode(2, container));      node.addChild(child);    }    else    {      node = new ASTNode(s, container);      node.addChild(child);    }    for (ASTNode argument : arguments)    {      node.addChild(argument);    }    return node;  }| < OPEN_PAR > node = TermLvl1() < CLOSE_PAR >  {    return node;  }| < MINUS > node = Primary()  {    ASTNode uiMinus = new ASTNode('-', container);    uiMinus.addChild(node);    return uiMinus;  }| t = < STRING >  {    s = t.image;    node = new ASTNode(s, container);    return node;  }}
