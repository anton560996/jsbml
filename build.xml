<?xml version="1.0"?>
<!--
    $Id$ 
    $URL$

    This file is part of JSBML. Please visit http://sbml.org/Software/JSBML
    for the latest version of JSBML and more information about SBML.

    Copyright (C) 2009-2014  jointly by the following organizations:
    1. The University of Tuebingen, Germany
    2. EMBL European Bioinformatics Institute (EBML-EBI), Hinxton, UK
    3. The California Institute of Technology, Pasadena, CA, USA
    4. The University of California, San Diego, La Jolla, CA, USA
    5. The Babraham Institute, Cambridge, UK

    This library is free software; you can redistribute it and/or modify it
    under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation. A copy of the license agreement is provided
    in the file named "LICENSE.txt" included with this software distribution
    and also available online as http://sbml.org/Software/JSBML/License.

    Version: $Rev$
-->
<project
  default="usage"
  basedir="."
>

	<!-- =================================================================== -->
	<!-- Initialization target                                               -->
	<!-- =================================================================== -->

	<target description="Initialization target" name="init" unless="target.init.done">
		
		<property name="target.init.done" value="true"/>

		<tstamp>
			<format property="YEAR" pattern="yyyy" />
		</tstamp>

		<taskdef resource="net/sf/antcontrib/antcontrib.properties">
			<classpath>
				<pathelement location="${basedir}/lib/ant-contrib-1.0b3.jar" />
			</classpath>
		</taskdef>

		<property name="Name" value="JSBML" />
		<property name="name" value="jsbml" />
		<property name="version" value="1.0-b1" />
		<property name="api.version" value="1.0" />

		<property name="year" value="${YEAR}" />

		<echo message="Determining the revision number of JSBML" />
		<exec executable="svn" outputproperty="svninfo.xml">
			<arg line="info --xml" />
		</exec>
		<xmlproperty collapseAttributes="true">
			<propertyresource name="svninfo.xml" />
		</xmlproperty>
		<property name="jsbml.revision" value="${info.entry.revision}" />

		<echo message="-----------   ${Name} ${version} [${year}] ------------" />
		<echo message="-----------     ${TODAY}   ------------" />
		<echo message="-----------     ${DSTAMP} ${TSTAMP}  ------------" />
		<echo message="-----------   svn revision ${jsbml.revision}  ------------" />

		<property environment="env" />
		<property name="build.compiler" value="modern" />
		<property name="build.sysclasspath" value="ignore" />
		<property name="debug" value="on" />
		<property name="optimize" value="on" />
		<property name="deprecation" value="false" />
		<property name="depend" value="true" />
		<property name="verbose" value="false" />

		<property name="build.number" value="${DSTAMP}-${TSTAMP}" />
		<property name="build.name" value="${version} (build ${build.number}, svn rev ${jsbml.revision})" />

		<property name="src.dir" value="${basedir}/core/src" />
		<property name="test.src.dir" value="${basedir}/core/test" />
		<property name="build.dir" value="${basedir}/build" />
		<property name="build.src" value="${basedir}/build/src" />
		<property name="build.dest" value="${basedir}/build/classes" />
		<property name="build.javadocs" value="${basedir}/build/apidocs" />
		<property name="jars.dir" value="${basedir}/core/lib" />
		<property name="dist.root" value="${basedir}/dist" />
		<property name="dist.dir" value="${dist.root}/${name}-${version}" />

		<property name="resource.dir" value="${basedir}/resources" />

		<property name="cellDesigner.module.base.dir" value="${basedir}/modules/celldesigner" />
		<property name="libSBMLio.module.base.dir" value="${basedir}/modules/libSBMLio" />

		<property name="core.base.dir" value="${basedir}/core" />
		<property name="package.names" value="comp fbc groups layout multi qual render req spatial" />

		<filter token="year" value="${year}" />
		<filter token="version" value="${version}" />
		<filter token="date" value="${TODAY}" />
		<filter token="log" value="true" />
		<filter token="verbose" value="true" />

		<!-- add everything needed to the classpath -->
		<!-- adjust the settings to your local environment -->
		<path id="classpath">
			<fileset dir="${jars.dir}" includes="*.jar *.zip"/>
			<path location="${core.base.dir}/build/classes"/>
		</path>

	</target>

	<!-- =================================================================== -->
	<!-- Help on usage                                                       -->
	<!-- =================================================================== -->
	<target
	  name="usage"
	  description="Help on usage"
	  depends="init"
	>
		<echo message="" />
		<echo message="" />
		<echo message=" ${Name} Build file" />
		<echo message=" -------------------------------------------------------------" />
		<echo message="" />
		<echo message=" available targets are:" />
		<echo message="" />
		<echo message="   jar         --> generates the ${name}.jar file" />
		<echo message="   bigjar      --> generates the ${name}-with-dependencies.jar file" />
		<echo message="   test        --> runs the tests" />
		<echo message="   javadoc     --> generates the API documentation" />
		<echo message="   clean       --> cleans up the directory" />
		<echo message="" />
		<echo message=" See the comments inside the build.xml file for more details." />
		<echo message=" -------------------------------------------------------------" />
		<echo message="" />
		<echo message="" />

		<!--
		<echo message="   compile     compiles the source code"/>

		-->

	</target>

	<!-- =================================================================== -->
	<!-- Prepares the build directory                                        -->
	<!-- =================================================================== -->
	<target
	  name="prepare"
	  description="Prepares the build directory"
	  depends="init"
	>
		<mkdir dir="${build.dir}" />
		<mkdir dir="${build.dest}" />
		<mkdir dir="${build.src}" />
		<mkdir dir="${dist.dir}" />
		<echo message="Done" />
	</target>

	<!-- =================================================================== -->
	<!-- Prepares the source code                                            -->
	<!-- =================================================================== -->
	<target
	  name="prepare-src"
	  description="Prepares the source code"
	  depends="prepare"
	  unless="prepare.src.target.done"
	>

		<property name="prepare.src.target.done" value="true"/>

		<ant dir="${core.base.dir}" inheritAll="false" inheritRefs="false">
			<target name="clean" />
			<target name="jar" />
		</ant>

		<copy todir="${build.src}">
			<fileset dir="${core.base.dir}/build/src" includes="**/*"/>
		</copy>
		
	</target>



	<!-- =================================================================== -->
	<!-- Creates the class package           depends="prepare-src, package"                                 -->
	<!-- =================================================================== -->
	<target
	  name="jar"
	  description="Creates the class package"
	  depends="prepare-src, package"
	>
		<jar
		  jarfile="${dist.dir}/${name}-${version}.jar"
		  manifest="${core.base.dir}/build/classes/META-INF/MANIFEST.MF" 
		  filesetmanifest="mergewithoutmain"
		  duplicate="preserve"
		  index="true"
		>	
			<fileset dir="${core.base.dir}/build/classes" excludes="**/package-info.class **/package.html"/>
			<zipgroupfileset dir="${build.dir}" includes="*.jar" excludes="**/package-info.class **/package.html"/>
			<service type="org.sbml.jsbml.xml.parsers.ReadingParser">
				<!-- This list need to be updated as soon as there is a new parser -->
				<provider classname="org.sbml.jsbml.xml.parsers.SBMLCoreParser" />
				<provider classname="org.sbml.jsbml.xml.parsers.XMLNodeReader" />
				<provider classname="org.sbml.jsbml.xml.parsers.MathMLStaxParser" />
				<provider classname="org.sbml.jsbml.xml.parsers.FBCParser" />
				<provider classname="org.sbml.jsbml.xml.parsers.GroupsParser" />
				<provider classname="org.sbml.jsbml.xml.parsers.L3LayoutParser" />
				<provider classname="org.sbml.jsbml.xml.parsers.LayoutParser" />
				<provider classname="org.sbml.jsbml.xml.parsers.MultiParser" />
				<provider classname="org.sbml.jsbml.xml.parsers.QualParser" />
				<provider classname="org.sbml.jsbml.xml.parsers.RenderParser" />
				<provider classname="org.sbml.jsbml.xml.parsers.SpatialParser" />
				<provider classname="org.sbml.jsbml.xml.parsers.CompParser" />
			</service>

		</jar>

	</target>

	<!-- =================================================================== -->
	<!-- Creates the class package and include all the dependencies jars     -->
	<!-- into a big jsbml jar file.                                          -->
	<!-- =================================================================== -->
	<target
	  name="jar-src"
	  description="Creates the class package and includes all the dependencies jars into a big jsbml jar file"
	  depends="jar"
	>
		<jar
		  jarfile="${dist.dir}/${name}-${version}-src.jar"
		  basedir="${build.src}" includes="**/*.java"
		  index="true"
		  manifest="${core.base.dir}/build/classes/META-INF/MANIFEST.MF"
		/>
	</target>

	<!-- =================================================================== -->
	<!-- Creates the class package and include all the dependencies jars     -->
	<!-- into a big jsbml jar file.                                          -->
	<!-- =================================================================== -->
	<target
	  name="bigjar"
	  description="Creates the class package and includes all the dependencies jars (and other resources) into a big jsbml jar file"
	  depends="jar"
	>

		<jar
		  jarfile="${dist.dir}/${name}-${version}-with-dependencies.jar" 
		  filesetmanifest="mergewithoutmain" duplicate="preserve"
		  index="true"
		  manifest="${core.base.dir}/build/classes/META-INF/MANIFEST.MF"
		>

			<!-- we use the ${build.src} to include the sources of jsbml in the resulting jar -->
			<fileset dir="${build.src}" />
			<zipgroupfileset dir="${jars.dir}" includes="*.jar" />
			<!-- jsbml core classes -->
			<fileset dir="${core.base.dir}/build/classes" />
			<!-- all the dependencies jars -->
			<zipgroupfileset dir="${build.dir}" includes="*.jar" />
			<!-- all L3 packages classes -->
			<service type="org.sbml.jsbml.xml.parsers.ReadingParser">
				<!-- This list need to be updated as soon as there is a new parser -->
				<provider classname="org.sbml.jsbml.xml.parsers.SBMLCoreParser" />
				<provider classname="org.sbml.jsbml.xml.parsers.XMLNodeReader" />
				<provider classname="org.sbml.jsbml.xml.parsers.MathMLStaxParser" />
				<provider classname="org.sbml.jsbml.xml.parsers.FBCParser" />
				<provider classname="org.sbml.jsbml.xml.parsers.GroupsParser" />
				<provider classname="org.sbml.jsbml.xml.parsers.L3LayoutParser" />
				<provider classname="org.sbml.jsbml.xml.parsers.LayoutParser" />
				<provider classname="org.sbml.jsbml.xml.parsers.MultiParser" />
				<provider classname="org.sbml.jsbml.xml.parsers.QualParser" />
				<provider classname="org.sbml.jsbml.xml.parsers.RenderParser" />
				<provider classname="org.sbml.jsbml.xml.parsers.SpatialParser" />
				<provider classname="org.sbml.jsbml.xml.parsers.CompParser" />
			</service>
		</jar>
	</target>


	<!-- =================================================================== -->
	<!-- Test the jsbml library                                              -->
	<!-- =================================================================== -->
	<target
	  name="test"
	  description="Test the jsbml library"
	  depends="jar"
	>

		<!-- TODO - add some tests using the package here -->

		<echo message="There should be NO failures or errors." />
		<echo message="" />
		<echo message="You can see a details of the tests on the two files : jsbmlTestResults.txt and libsbmlCompatibilityTestResults.txt" />
		<echo message="" />

		<junit printsummary="yes">
			<!-- showoutput="yes" -->
			<formatter type="plain" />
			<test name="org.sbml.jsbml.xml.test.Tests" outfile="jsbmlTestResults">
				<formatter type="plain" />
			</test>
			<classpath>
				<path refid="classpath" />
				<pathelement location="${build.dir}/${name}-${version}.jar" />
			</classpath>
		</junit>
		<echo message="" />

		<junit printsummary="yes">
			<!-- showoutput="yes" -->
			<formatter type="plain" />
			<test name="org.sbml.jsbml.xml.test.LibsbmlCompatibilityTests" outfile="libsbmlCompatibilityTestResults">
				<formatter type="plain" />
			</test>
			<classpath>
				<path refid="classpath" />
				<pathelement location="${build.dir}/${name}-${version}.jar" />
			</classpath>
		</junit>
		<echo message="" />

	</target>


	<!-- =================================================================== -->
	<!-- Creates the API documentation                                       -->
	<!-- =================================================================== -->
	<target
	  name="javadoc"
	  depends="prepare-src, package"
	  description="Creates the API documentation"
	>
		
		<mkdir dir="${build.javadocs}" />
		<javadoc packagenames="org.*" excludepackagenames="org.sbml.jsbml.test.*, org.sbml.jsbml.xml.test.*" 
			sourcepath="${build.src}" destdir="${build.javadocs}" classpathref="classpath" maxmemory="96m" 
			author="true" version="true" use="true" splitindex="true" noindex="false" 
			windowtitle="${Name} ${version} API Specification" doctitle="${Name} ${version} API Specification"
			breakiterator="yes" access="public">
			
			<link href="http://docs.oracle.com/javase/6/docs/api/" />
			<link href="http://www.biojava.org/docs/api17" />
			<tag name="sbml.deprecated" description="Deprecated in SBML since:" />
			<tag name="libsbml.deprecated" description="Note: this method is kept here as it exist in libSBML." />
			<tag name="jsbml.note" description="Note" />
			<tag name="jsbml.warning" />
			<tag name="doc.note" description="Documentation note" />

		</javadoc>
	</target>

	<!-- =================================================================== -->
	<!-- Creates the javadocs jar package                                    -->
	<!-- =================================================================== -->
	<target
	  name="jar-javadoc"
	  description="Creates the javadocs jar package"
	  depends="javadoc"
	>

		<jar jarfile="${dist.dir}/${name}-${version}-javadoc.jar" basedir="${build.javadocs}"
			index="true" manifest="${core.base.dir}/build/classes/META-INF/MANIFEST.MF" />

	</target>

	<!-- =================================================================== -->
	<!-- Creates the distribution                                            -->
	<!-- =================================================================== -->
	<target
	  name="dist"
	  description="Creates the distribution"
	  depends="init"
	>

		<property name="prepare.src.target.done" value="true"/>

		<!-- Cleaning before starting -->
		<antcall target="clean" />
		
		<!-- Creates the standard jar files -->
		<antcall target="jar" />
		<property name="package.target.done" value="true"/>
		<property name="prepare.src.target.done" value="true"/>
		
		<antcall target="jar-src" />
		<copy todir="${dist.root}" file="${dist.dir}/${name}-${version}.jar" />

		<!-- Creates the jar file including all the dependencies -->
		<antcall target="bigjar" />
		<copy todir="${dist.root}" file="${dist.dir}/${name}-${version}-with-dependencies.jar" />

		<!-- Creates and copy the generated javadoc -->
		<antcall target="jar-javadoc" />

		<copy todir="${dist.dir}/doc/api">
			<fileset dir="${build.javadocs}/" includes="**/*"/>
		</copy>

		<!-- Copy the source files -->
		<copy todir="${dist.dir}/src">
			<fileset dir="${build.src}/" includes="**/*"/>
		</copy>

		<!-- Copy all the dependencies jar files -->
		<copy todir="${dist.dir}/lib">
			<fileset dir="${jars.dir}/" includes="*.jar"/>
		</copy>

		<!-- put back README when it is done -->
		<copy todir="${dist.dir}">
			<fileset dir="${basedir}/" includes="LICENSE.txt NEWS.txt AUTHORS.txt build.xml"/>
		</copy>
		<copy todir="${dist.dir}/licenses">
			<fileset dir="${basedir}/core/licenses" includes="**/*"/>
		</copy>
		<!-- <copy todir="${dist.dir}" file="${core.base.dir}/performanceTest.sh"/> -->

		<copy todir="${dist.dir}/doc">
			<fileset dir="${basedir}/core/doc" includes="**/*.pdf **/*.jpg **/*.java" excludes="posters/** publications/** templates/**"/>
		</copy>

		<!-- create the modules files -->
		<antcall target="module-dist" />

		<!-- Creates the archives to be distributed -->
		<zip basedir="${dist.root}" destfile="${dist.root}/${name}-${version}-full.zip" includes="${name}-${version}/**" />

		<!-- Not generating a tar.gz, having only a zip file should be enough -->
		<!-- <tar basedir="${dist.root}" destfile="${dist.root}/${name}-${version}.tar.gz" includes="${name}-${version}/**" compression="gzip"/> -->

	</target>


	<!-- =================================================================== -->
	<!-- Build the jsbml modules                                             -->
	<!-- =================================================================== -->
	<target
	  name="module"
	  description="Build the jsbml modules"
	  depends="init"
	>

		<ant dir="${cellDesigner.module.base.dir}" inheritAll="false" inheritRefs="false">
			<target name="clean" />
			<target name="jar" />
			<target name="javadoc" />
		</ant>

		<ant dir="${libSBMLio.module.base.dir}" inheritAll="false" inheritRefs="false">
			<target name="clean" />
			<target name="jar" />
			<target name="javadoc" />
		</ant>

	</target>

	<!-- =================================================================== -->
	<!-- Build a single jsbml package                                    -->
	<!-- =================================================================== -->
	<target
	  name="prepare-package"
	  depends="init"
	  description="Build a single jsbml package"
	>

		<echo>Package ${packagename}</echo>

		<ant dir="${basedir}/extensions/${packagename}" inheritAll="false" inheritRefs="false">
			<target name="clean" />
			<target name="jar" />
			<!-- <target name="dist"/> -->
		</ant>
		<copy todir="${build.src}">
			<fileset dir="${basedir}/extensions/${packagename}/build/src" />
		</copy>
		<copy todir="${build.dir}">
			<fileset dir="${basedir}/extensions/${packagename}/build/" includes="*.jar" />
		</copy>

	</target>


	<!-- =================================================================== -->
	<!-- Build the jsbml extensions/packages                                   -->
	<!-- =================================================================== -->
	<target
	  name="package"
      description="Build the jsbml L3 packages"
	  depends="init"
	  unless="package.target.done"
	>

		<property name="package.target.done" value="true"/>

		<foreach list="${package.names}" delimiter=" " param="packagename" target="prepare-package" />

	</target>


	<!-- =================================================================== -->
	<!-- Create the jsbml modules distribution                               -->
	<!-- =================================================================== -->
	<target
	  name="module-dist"
	  description="Build the jsbml modules"
	  depends="init"
	>

		<mkdir dir="${dist.dir}/modules" />

		<property file="${cellDesigner.module.base.dir}/celldesigner-build.properties" />
		<property file="${libSBMLio.module.base.dir}/libSBMLio-build.properties" />

		<!--
	    <echo message="Value read from celldesigner properties file = ${celldesigner.name}" />
		<echo message="Value read from celldesigner properties file = ${celldesigner.version}" />
	    <echo message="Value read from libSBMLio properties file = ${libSBMLio.name}" />
		-->

		<ant dir="${cellDesigner.module.base.dir}" inheritAll="false" inheritRefs="false">
			<target name="dist" />
		</ant>

		<copy todir="${dist.dir}/modules/${celldesigner.name}-${celldesigner.version}">
			<fileset dir="${cellDesigner.module.base.dir}/dist/${celldesigner.name}-${celldesigner.version}" includes="*.jar" />
		</copy>
		<copy todir="${dist.root}">
			<fileset dir="${cellDesigner.module.base.dir}/dist/" includes="*.zip" />
		</copy>

		<ant dir="${libSBMLio.module.base.dir}" inheritAll="false" inheritRefs="true">
			<target name="dist" />
		</ant>

		<copy todir="${dist.dir}/modules/${libSBMLio.name}-${libSBMLio.version}">
			<fileset dir="${libSBMLio.module.base.dir}/dist/${libSBMLio.name}-${libSBMLio.version}" includes="*.jar" />
		</copy>
		<copy todir="${dist.root}">
			<fileset dir="${libSBMLio.module.base.dir}/dist/" includes="*.zip" />
		</copy>

	</target>


	<!-- =================================================================== -->
	<!-- Cleans everything                                                   -->
	<!-- =================================================================== -->
	<target
	  name="clean"
	  description="Cleans everything"
      depends="init"
	>
		<delete includeEmptyDirs="true" quiet="yes">
			<fileset dir="${build.dir}" includes="**/*" />
		</delete>
		<delete dir="${dist.root}" includeEmptyDirs="true" quiet="yes">
		</delete>
	</target>

</project>

<!-- End of file -->
