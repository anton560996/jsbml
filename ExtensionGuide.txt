							************************************************	
							*   Guide for implementing extension parsers   *
							************************************************

1) Create your SBML package component classes :

	a) If you need to extend a SBML core component (Model, SBMLDocument, Compartment, Species, SpeciesReference, ModifierSpeciesReference
	Reaction, KineticLaw, Parameter, Event, EventAssignment, InitialAssignment, AssignmentRule, RateRule, AlgebraicRule, Constraint, Annotation,
	Delay, Trigger, FunctionDefinition, ListOf, Unit, UnitDefinition, CompartmentType and SpeciesType), you have to create a new Java class
	which extends the appropriate SBML core extension class of the sbmlExtensions package.
	
	Ex : The multi package needs to extend a Species because there are new subElements/variables/methods provided by this package for a species element.
	
		-> If there is no appropriate implemented class in the sbmlExtensions package, create one as the SpeciesExtension example :
		 
package org.sbml.jsbml.sbmlExtensions;

import org.sbml.jsbml.Annotation;
import org.sbml.jsbml.Compartment;
import org.sbml.jsbml.Model;
import org.sbml.jsbml.Parameter;
import org.sbml.jsbml.SBMLDocument;
import org.sbml.jsbml.SBaseChangedListener;
import org.sbml.jsbml.Species;
import org.sbml.jsbml.SpeciesType;
import org.sbml.jsbml.Unit;
import org.sbml.jsbml.UnitDefinition;
import org.sbml.jsbml.Unit.Kind;

public abstract class SpeciesExtension extends Species{

	// The SBML component instance which is extended by the package.
	private Species species;
	
	// Delegate all the Species methods to the Species instance of this class (not the methods readAttribute and writeXMLAttributes however).
	
	public SpeciesExtension(Species species){
		super();
		this.species = species;
	}
	
	public org.sbml.jsbml.Species clone(){
		return species.clone();
	}

	[...]

	public void unsetSBOTerm() {
		species.unsetSBOTerm();
	}
}


		-> If there is an appropriate implemented class in the sbmlExtensions package, create a new class which extends it. See the MultiTest example in
		the tests.org.sbml.jsbml.multiTest package.
		
public class MultiSpecies extends SpeciesExtension{

	// New subElements/variables provided by this package
	
	private ListOf<InitialSpeciesInstance> listOfInitialSpeciesInstance;
	
	public MultiSpecies(Species species) {
		super(species);
		this.setListOfInitialSpeciesInstance(null);
	}

	// New methods provided by this package
	
	public void setListOfInitialSpeciesInstance(
			ListOf<InitialSpeciesInstance> listOfInitialSpeciesInstance) {
		this.listOfInitialSpeciesInstance = listOfInitialSpeciesInstance;
	}

	public ListOf<InitialSpeciesInstance> getListOfInitialSpeciesInstance() {
		return listOfInitialSpeciesInstance;
	}
	
	public boolean isSetListOfSpeciesInstances(){
		return this.listOfInitialSpeciesInstance != null;
	}
	
	public void addInitialSpeciesInstance(InitialSpeciesInstance initialSpecies) {
		if (!isSetListOfSpeciesInstances()){
			this.listOfInitialSpeciesInstance = new ListOf<InitialSpeciesInstance>();
		}
		if (!listOfInitialSpeciesInstance.contains(initialSpecies)) {
			initialSpecies.setParentSBML(this);
			listOfInitialSpeciesInstance.add(initialSpecies);
		}
	}
	
	public InitialSpeciesInstance getInitialSpeciesInstance(int n) {
		if (isSetListOfSpeciesInstances()){
			return listOfInitialSpeciesInstance.get(n);
		}
		return null;
	}

	public InitialSpeciesInstance getInitialSpeciesInstance(String id) {
		if (isSetListOfSpeciesInstances()){
			for (InitialSpeciesInstance comp : listOfInitialSpeciesInstance) {
				if (comp.getId().equals(id)){
					return comp;
				}
			}
		}
		return null;
	}

	// read and write the new properties of a Species proposed by this package
	
		/*
	 * (non-Javadoc)
	 * 
	 * @see org.sbml.jsbml.element.SBase#readAttribute(String attributeName,
	 * String prefix, String value)
	 */
	@Override
	public boolean readAttribute(String attributeName, String prefix,
			String value) {
		boolean isAttributeRead = super.readAttribute(attributeName, prefix,
				value);
				
		// read the new attributes of the extension

		return isAttributeRead;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.sbml.jsbml.element.SBase#writeXMLAttributes()
	 */
	@Override
	public HashMap<String, String> writeXMLAttributes() {
		HashMap<String, String> attributes = super.writeXMLAttributes();

	// write the new attributes of the extension

		return attributes;
	}
}


	b) If you want to create a new element which is not directly attached to or depending on a SBML core component (an element
	from the list described in 1)a). not an extension element from the package sbmlExtensions you have extended), you have to 
	implement the SBase interface or extend one of the following abstract classes : AbstractSBase, AbstractNamedSBase, MathContainer.
	
	Ex : The selector element of the multi package doesn't extend any SBML core element but is a subElement of the listOfSelectors
	which should extend a ListOf extension class.


2) Create your package parser class. It should implement both ReadingParser and WritingParser interfaces from the org.sbml.jsbml.xml.stax package.

	a) Implementation of ReadingParser :
	
	There are 6 methods to implement : 
	-> public Object processStartElement(String elementName, String prefix, boolean hasAttributes, boolean hasNamespaces, Object contextObject);
	   	See the Javadoc for more information about the arguments of this method.
	   
	   This method should create the SBML component instance matching the XML element ( represented by a name (elementName) and a prefix (prefix)).
	   and return the new SBML element created. The new element should be integrated/added to the contextObject instance (with the appropriate method proposed
	   by the contextObject), its level and version should be set to the level and version of contextObject and its parentSBML object should be set to the contextObject
	   instance (for that, a convenient method of AbstractSBase could be called as following : contextObject.setThisAsParentSBMLObject(newObject);).
	   If the new element extends any SBML core element (see list 1)a)), the new element should be added to the list of extending object of contextObject (Ex : the contextObject is
	   a Species instance and the new object is an extension of Species : species.addExtension(this.namespaceURI, multiSpecies) where namespaceURI is the namespace of this package)
	   
	   If the XML element doesn't match any SBML component, the method can just modify or not the contextObject instance and returns it.
	   
	   Ex : In the SBMLCoreParser, the Model instance of SBMLDocument is set as following :
	   		
	   		// Only a SBMLDocument can contain a Model instance
	   		else if (contextObject instanceof SBMLDocument){
					SBMLDocument sbmlDocument = (SBMLDocument) contextObject;
					
					// if the XML element is a 'model' element, we can set the Model instance of sbmlDocument
					if (elementName.equals("model")){
						Model model = new Model(); 
						model.setParentSBML(sbmlDocument); // not necessary, the setModel(model) automatically
														   // call the setThisAsParentSBML(model) which will do
														   // the same job.
						sbmlDocument.setModel(model);
						
						// Return the new SBML component instance which represents the new environment.
						return model;
					}
				}
		
		
	-> public void processAttribute(String elementName, String attributeName, String value, String prefix, boolean isLastAttribute, Object contextObject);
	   See the Javadoc for more information about the arguments of this method.
	
	   This method should modify/set a variable instance of the contextObject instance which matches the XML attribute( represented by a name (attributeName), a prefix (prefix)
	   , a value (value) and the matching XML elementName (elementName)).
	   If the XML attribute doesn't match any variable of the contextObject, the method can log a warning/error message or do nothing. This method should call the
	   public boolean readAttribute(String attributeName, String prefix, String value) method of contextObject to know if the attribute has been read or not by the contextObject 
	   component.
	   
	   Ex : In the SBMLCoreParser, the attributes are processed as following :
	   		
	   		public void processAttribute(String elementName, String attributeName,
			String value, String prefix, boolean isLastAttribute,
			Object contextObject) {
		
			boolean isAttributeRead = false;
		
			// A SBMLCoreParser can modify a contextObject which is an instance of SBase.
			// Try to read the attributes.
			if (contextObject instanceof SBase){
			SBase sbase = (SBase) contextObject;
			isAttributeRead = sbase.readAttribute(attributeName, prefix, value);
			}
			// A SBMLCoreParser can modify a contextObject which is an instance of Annotation.
			// Try to read the attributes.
			else if (contextObject instanceof Annotation){
				Annotation annotation = (Annotation) contextObject;
				isAttributeRead = annotation.readAttribute(attributeName, prefix, value);
			}
		
			if (!isAttributeRead){
				// TODO : throw new SBMLException ("The attribute " + attributeName + " on the element " + elementName + "is not part of the SBML specifications");
			}
			}
			

	-> public void processCharactersOf(String elementName, String characters, Object contextObject);
		   See the Javadoc for more information about the arguments of this method.
		   
		   This method should modify/set the variable instance of the contextObject instance which matches
		   this XML text element (represented by the name of the element which contains it (elementName) and
		   its value (characters)). If there is no matching variable of contextObject for this text element,
		   an error/message can be thrown or the method can just do nothing.
		   
		   Ex : The Family and given names, organisation and email of a ModelCreator instance. in VCardParser :
		   		// An elementName can be null if the text appears after a ending element tag.
				if (elementName != null){
					// A VCardParser can only modify a contextObject which is a ModelCreator instance.
					if (contextObject instanceof ModelCreator){
						ModelCreator modelCreator = (ModelCreator) contextObject;
				
						// Sets the familyName String of modelCreator.
						if (elementName.equals("Family") && hasReadFamilyName){
							modelCreator.setFamilyName(characters);
						}
						// Sets the givenName String of modelCreator.
						else if (elementName.equals("Given") && hasReadGivenName){
							modelCreator.setGivenName(characters);
						}
						// Sets the email String of modelCreator.
						else if (elementName.equals("EMAIL") && hasReadEMAIL){
							modelCreator.setEmail(characters);
						}
						// Sets the orgname String of modelCreator.
						else if (elementName.equals("Orgname") && hasReadOrgName){
							modelCreator.setOrganisation(characters);
						}
						else {
							// TODO : SBML syntax error, throw an exception?
						}
					}
					else {
						// TODO : SBML syntax error, throw an exception?
					}
				}
	
	-> public void processEndElement(String elementName, String prefix, boolean isNested, Object contextObject);
		   See the Javadoc for more information about the arguments of this method.
		   
		   This method is useful to initialise/reinitialise variables and elements of contextObject which need
		   that several previous variables have been set before. This method informs that the XML element represented
		   by a name (elementName) and a prefix (prefix) is finished.
		   If there is nothing to do at the end of an element, this method will do nothing.
	
		   Ex : At the end of a note element, we can create a String notes from the StringBuffer notesBuffer of contextObject
		   which was used to build the notes line by line by StringParser (faster than appending a new String to a String). It is something 
		   you should add in your parser if your elements contain notes or html contents.
		   
		   	public void processEndElement(String elementName, String prefix, boolean isNested,
			Object contextObject) {
	
			if (elementName.equals("notes") && contextObject instanceof SBase){
				SBase sbase = (SBase) contextObject;
				sbase.setNotes(sbase.getNotesBuffer().toString());
			}
			else if (elementName.equals("message") && contextObject instanceof Constraint){
				Constraint constraint = (Constraint) contextObject;
				
				if (constraint.getLevel() >= 3 || (constraint.getLevel() == 2 && constraint.getVersion() > 1)){
					
				}
				constraint.setMessage(constraint.getMessageBuffer().toString());
			}
		}
		   
	-> public void processEndDocument(SBMLDocument sbmlDocument);
		   See the Javadoc for more information about the arguments of this method.
		   
		   This method is useful to initialise variables in your SBMLDocument instance which need that several elements and variables
		   in your SBMLDocument has previously been initialised. As there is no order of XML elements in SBML files anymore, it is 
		   necessary to initialise these variables at the end of the document, when the elements has been entirely read.
		   If there is nothing to initialise, adjust or check at the end of the document, this method will do nothing.
		   
		   Ex : RDFAnnotationParser checks that each annotation element has a proper about variable referring to the metaid of its parent element.
		   
		   		// Check if sbmlDocument and all the  SBML components have a valid Annotation.
				if (sbmlDocument.hasValidAnnotation()){
					Model model = sbmlDocument.getModel();
			
					if (model.hasValidAnnotation()){
						if (model.isSetListOfCompartments()){
							for (int i = 0; i < model.getNumCompartments(); i++){
								if (!model.getCompartment(i).hasValidAnnotation()){
									// TODO : change the about value of the annotation.
								}
							}
						}
						[...]
					}
				}
	
	-> public void processNamespace(String elementName, String URI, String prefix, String localName, boolean hasAttributes, boolean isLastNamespace, Object contextObject);
		   See the Javadoc for more information about the arguments of this method.
		   
		   This method is useful when several namespace declarations appear in a XML element (case of a sbml, annotation and RDF node for instance).
		   The method will store the namespace information (URI, prefix of the namespace if it exists, localName of the namespace) into the appropriate
		   variable of contextObject (often a map). If the XML element normally doesn't expect any namespace declarations, a warning or error message can be logged.
		   
		   Ex : SBMLCoreParser : store the namespace information of a sbml XML element.
		   	
		   		if (contextObject instanceof SBMLDocument){
				SBMLDocument sbmlDocument = (SBMLDocument) contextObject;
				if (!URI.equals(namespaceURI)){
					sbmlDocument.addNamespace(localName, prefix, URI);
				}
			} 


	b) Implementation of WritingParser :
	
	There are 5 methods to implement : 
	-> public ArrayList<Object> getListOfSBMLElementsToWrite(Object objectToWrite);
		See the Javadoc for more information about the arguments of this method.
	
	   This method should return a list of subElements to write for this objectToWrite instance or null if 
	   this object doesn't have any subElements.
	   
	   Ex : for SBMLCoreParser, if the objectToWrite is a SBMLDocument instance, the list of subElements (which is a Java ArrayList)
	   		will just contain the Model instance of SBMLDocument if it is set or be null otherwise.
	   		
	   		ArrayList<Object> listOfElementsToWrite = null;
			if (objectToWrite instanceof SBase){
			if (objectToWrite instanceof SBMLDocument){
				SBMLDocument sbmlDocument = (SBMLDocument) objectToWrite;
				if (sbmlDocument.isSetModel()){
					listOfElementsToWrite = new ArrayList<Object>();
					listOfElementsToWrite.add(sbmlDocument.getModel());
				}
			}
			[...]
			}


	-> public void writeElement(SBMLObjectForXML xmlObject, Object sbmlElementToWrite); 
		   See the Javadoc for more information about the arguments of this method.
		   
		   This method should set the name of xmlObject with the equivalent XML element name of
		   sbmlElementToWrite. This name will then be used to write the XML element tag.
		   
		   Ex : SBMLCoreParser : The name of an AssignmentRule depends on the level and version.
		   		if (sbmlElementToWrite instanceof SBase){
				SBase sbase = (SBase) sbmlElementToWrite;
					if (!xmlObject.isSetName()){
						if (sbmlElementToWrite instanceof AssignmentRule){
							AssignmentRule assignmentRule = (AssignmentRule) sbmlElementToWrite;
							if (assignmentRule.getLevel() == 1){
								if (assignmentRule.getVersion() == 1 && assignmentRule.isSpeciesConcentration()){
									xmlObject.setName("specieConcentrationRule");
								}
								else if (assignmentRule.getVersion() == 2 && assignmentRule.isSpeciesConcentration()){
									xmlObject.setName("speciesConcentrationRule");
								}
								else if (assignmentRule.isCompartmentVolume()){
									xmlObject.setName("compartmentVolumeRule");
								}
								else if (assignmentRule.isParameter()){
									xmlObject.setName("parameterRule");
								}
							}
							else {
								xmlObject.setName(sbase.getElementName());
							}
							[...]
						}
					}
				}

	-> public void writeNamespaces(SBMLObjectForXML xmlObject, Object sbmlElementToWrite);
		   See the Javadoc for more information about the arguments of this method.
		   
		   This method is useful to set the namespace and prefix values of xmlObject to the equivalent namespace
		   and prefix of sbmlElementToWrite instance.
		   
		   !!! It is not really used as the namespaces are directly processed in SBMLWriter, maybe will be removed from
		   WritingParser interface. 

	-> public void writeAttributes(SBMLObjectForXML xmlObject, Object sbmlElementToWrite);
		   See the Javadoc for more information about the arguments of this method.
		   
		   This method should add all the known XML attributes of sbmlElementToWrite to the attributes map of xmlObject.
		   The method should call the writeXMLAttributes of sbmlElementToWrite.
		   
		   Ex : SBMLCoreParser : 
		   
		   		if (sbmlElementToWrite instanceof SBase){
					SBase sbase = (SBase) sbmlElementToWrite;
			
					xmlObject.addAttributes(sbase.writeXMLAttributes());
				}

	-> public void writeCharacters(SBMLObjectForXML xmlObject, Object sbmlElementToWrite);
		   See the Javadoc for more information about the arguments of this method.
		   
		   This method should set the characters variable of xmlObject to the equivalent XML text
		   element of sbmlElementToWrite (normally not the case of normal SBML elements, necessary for the annotation
		   and notes).
		   
		   !!! It is not really used for the moment as the notes and annotations are directly written by SBMLWriter. So
		   it will maybe removed from WritingParser.
	
							