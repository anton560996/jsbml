#!/usr/local/bin/dot
#
# dot -Tpdf type_hierarchy.dot -otype_hierarchy.pdf && acroread type_hierarchy.pdf &
# dot -Tpng type_hierarchy.dot -otype_hierarchy.png
#

strict digraph G{

	nodesep=0.25;
	ranksep=0.5;

	edge [
	  fontname="Helvetica",
	  fontsize=10,
	  labelfontname="Helvetica",
	  labelfontsize=10
	];
	node [
	  fontname="Helvetica",
	  fontsize=10,
	  shape=box
	];
  /*
   * Abstract data types
   */
  AbstractMathContainer                  [label=<<font><I>Abstract<br/>MathContainer</I></font>>, style="filled", fillcolor="#F0F8FF"];
  AbstractNamedSBase                     [label=<<font><I>Abstract<br/>NamedSBase</I></font>>, style="filled", fillcolor="#F0F8FF"];
  AbstractSBase                          [label=<<font><I>Abstract<br/>SBase</I></font>>, style="filled", fillcolor="#F0F8FF"];
  AbstractSBasePlugin                    [label=<<font><I>AbstractSBase<br/>Plugin</I></font>>, style="filled", fillcolor="#F0F8FF"];

  /*
   * Interfaces
   */	
  UniqueNamedSBase                       [label="<<interface>>\nUnique Named SBase", style="filled", fillcolor="#F0F8FF"];
  CallableSBase                          [label="<<interface>>\nCallable SBase", style="filled", fillcolor="#F0F8FF"];
  CompartmentalizedSBase                 [label="<<interface>>\nCompartmentalized\nSBase", style="filled", fillcolor="#F0F8FF"];
  NamedSBase                             [label="<<interface>>\nNamedSBase", style="filled", fillcolor="#F0F8FF"];

  subgraph clusterQual {
    fontname="Helvetica";
    fontsize=12;
    style="filled";
    fillcolor="#d2ffd2"
    color="#ffffff"
    label="Qualitative Models Extension";
    labelloc=b;
    labeljust=l;
    
      // Abstract data types
   	  InputTransitionEffect         [label="<<enumeration>>\nInput\nTransition Effect"];
   	  OutputTransitionEffect        [label="<<enumeration>>\nOutput\nTransition Effect"];
   	  Sign                          [label="<<enumeration>>\nSign"];
    
	  /*
	   * Objects
	   */
	  FunctionTerm                               [label="Function\nTerm"];
	  Input                                      [label="Input"];
	  Output                                     [label="Output"];
	  QualitativeSpecies                         [label="Qualitative\nSpecies"];
	  QualModelPlugin                            [label="Qual Model\nPlugin"];
	  Transition                                 [label="Transition"];
      
      /*
       * inheritance graph
       */	  
      Input      -> InputTransitionEffect  [dir=back,arrowtail=odiamond];
      Output     -> OutputTransitionEffect [dir=back,arrowtail=odiamond];
      Input      -> Sign                   [dir=back,arrowtail=odiamond];      
      
  }

  /*
   * inheritance graph
   */
  AbstractMathContainer  -> FunctionTerm           [dir=back,arrowtail=empty];
  UniqueNamedSBase       -> Input                  [dir=back,arrowtail=empty,style=dashed];
  CallableSBase          -> Input                  [dir=back,arrowtail=empty,style=dashed];
  
  CompartmentalizedSBase -> QualitativeSpecies     [dir=back,arrowtail=empty,style=dashed];

  UniqueNamedSBase       -> Output                 [dir=back,arrowtail=empty,style=dashed];
  CallableSBase          -> Output                 [dir=back,arrowtail=empty,style=dashed];

  UniqueNamedSBase       -> QualitativeSpecies     [dir=back,arrowtail=empty,style=dashed];
  UniqueNamedSBase       -> Transition             [dir=back,arrowtail=empty,style=dashed];
  
  AbstractNamedSBase     -> QualitativeSpecies     [dir=back,arrowtail=empty];
  AbstractNamedSBase     -> Transition             [dir=back,arrowtail=empty];
  AbstractNamedSBase     -> Input                  [dir=back,arrowtail=empty];
  AbstractNamedSBase     -> Output                 [dir=back,arrowtail=empty];

  AbstractSBase          -> AbstractNamedSBase     [dir=back,arrowtail=empty];
  AbstractSBase          -> AbstractMathContainer  [dir=back,arrowtail=empty];
  
  AbstractSBasePlugin    -> QualModelPlugin        [dir=back,arrowtail=empty];
  
  NamedSBase             -> AbstractNamedSBase     [dir=back,arrowtail=empty,style=dashed];
  NamedSBase             -> CompartmentalizedSBase [dir=back,arrowtail=empty,style=dashed];
  NamedSBase             -> UniqueNamedSBase       [dir=back,arrowtail=empty,style=dashed];

}

