/* Generated By:JavaCC: Do not edit this line. TextToASTNodeParser.java */
package org.sbml.jsbml.text.parser;
import org.sbml.jsbml.*;
import javax.swing.JDialog;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.UnsupportedLookAndFeelException;

public class TextToASTNodeParser implements TextToASTNodeParserConstants {
  private MathContainer container;

  public static void main(String args []) throws ParseException
  {
    try
    {
      Model m = new Model("test", 2, 4);
      m.createFunctionDefinition("f");
      m.createRateRule();
      while (true)
      {
        TextToASTNodeParser parser = new TextToASTNodeParser(System.in);
        System.out.println("Reading from standard input...");
        System.out.print("Enter an expression like \u005c"1+(2+3)*4;\u005c" :");
        ASTNode node = parser.Parse(m.getRule(0));
        System.out.println(node.toLaTeX());
        /*        JDialog d = new JDialog();        d.setTitle("Node output");        d.setModal(true);        d.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);        JTree tree = new JTree(node);        d.getContentPane().add(        new JScrollPane(tree,         JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,         JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED));        d.pack();        d.setLocationRelativeTo(null);        d.setVisible(true);*/
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
  }

  final public ASTNode Parse(MathContainer container) throws ParseException {
  ASTNode node = null;
  this.container = container;
    node = Expression();
    {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode Expression() throws ParseException {
  ASTNode value = null;
    value = TermLvl1();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 0:
      jj_consume_token(0);
      break;
    case EOL:
      jj_consume_token(EOL);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return value;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode TermLvl3() throws ParseException {
  ASTNode i;
  ASTNode value;
  ASTNode node = null;
    value = Primary();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POWER:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      jj_consume_token(POWER);
      i = Primary();
      node = new ASTNode(ASTNode.Type.POWER, container);
      node.addChild(value);
      node.addChild(i);
      value = node;
    }
    {if (true) return value;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode TermLvl2() throws ParseException {
  ASTNode i;
  ASTNode value;
  ASTNode node = null;
    value = TermLvl3();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMES:
      case DIVIDE:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMES:
        jj_consume_token(TIMES);
        i = TermLvl3();
      node = new ASTNode('*', container);
      node.addChild(value);
      node.addChild(i);
      value = node;
        break;
      case DIVIDE:
        jj_consume_token(DIVIDE);
        i = TermLvl3();
      if (value.isInteger() && i.isInteger())
      {
        node = new ASTNode(container);
        node.setValue(value.getInteger(), i.getInteger());
        value = node;
      }
      else
      {
        node = new ASTNode('/', container);
        node.addChild(value);
        node.addChild(i);
        value = node;
      }
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return value;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode TermLvl1() throws ParseException {
  ASTNode i;
  ASTNode value;
  ASTNode node = null;
    value = TermLvl2();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        i = TermLvl2();
      node = new ASTNode('+', container);
      node.addChild(value);
      node.addChild(i);
      value = node;
        break;
      case MINUS:
        jj_consume_token(MINUS);
        i = TermLvl2();
      node = new ASTNode('-', container);
      node.addChild(value);
      node.addChild(i);
      value = node;
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return value;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode Primary() throws ParseException, NumberFormatException {
  Token t;
  double d;
  int i;
  ASTNode node = new ASTNode(container);
  String s;
  String vals [ ];
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      t = jj_consume_token(NUMBER);
    d = Double.parseDouble(t.image);
    node.setValue(d);
    {if (true) return node;}
      break;
    case INTEGER:
      t = jj_consume_token(INTEGER);
    i = Integer.parseInt(t.image);
    node.setValue(i);
    {if (true) return node;}
      break;
    case EXPNUMBER:
      t = jj_consume_token(EXPNUMBER);
    s = t.image;
    vals = s.toLowerCase().split("e");
    node.setValue(Double.parseDouble(vals [ 0 ]), Integer.parseInt(vals [ 1 ]));
    {if (true) return node;}
      break;
    case FUNCTION:
      t = jj_consume_token(FUNCTION);
    s = t.image;
    String name;
    s.substring(0, s.length() - 2);
    vals = s.split("\u005c\u005c(");
    name = vals [ 0 ];
    node = new ASTNode(name, container);
    vals = vals [ 1 ].split(",");
    for (int j = 0; j < vals.length; j++)
    {
      node.addChild(new ASTNode(vals [ j ].trim(), container));
    }
    {if (true) return node;}
      break;
    case OPEN_PAR:
      jj_consume_token(OPEN_PAR);
      node = TermLvl1();
      jj_consume_token(CLOSE_PAR);
    {if (true) return node;}
      break;
    case MINUS:
      jj_consume_token(MINUS);
      node = Primary();
    ASTNode uiMinus = new ASTNode('-', container);
    uiMinus.addChild(node);
    {if (true) return uiMinus;}
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public TextToASTNodeParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[7];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x4001,0x100,0xc00,0xc00,0x280,0x280,0x1278,};
   }

  /** Constructor with InputStream. */
  public TextToASTNodeParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public TextToASTNodeParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new TextToASTNodeParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public TextToASTNodeParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new TextToASTNodeParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public TextToASTNodeParser(TextToASTNodeParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(TextToASTNodeParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[15];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 7; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 15; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
