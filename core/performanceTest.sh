#!/bin/bash

declare -i TOTAL_TIME
declare -i TIME
declare -i NB_FILES
declare -i MEAN

TOTAL_TIME=0
NB_FILES=0

INPUT=$1

if [ -d ${INPUT} ]
then
    for file in ${INPUT}/*.xml
    do
	# avoid to read the files generated by the PerformanceTest program
	if [[ ${file} == *"-jsbml"* ]]
	then
	    #echo "avoiding ${file}"
	    continue
	fi

	OUTPUT=$(java -client -classpath build/jsbml-*-with-dependencies.jar org.sbml.jsbml.test.PerformanceTest ${file})

	# transform the output of the java program into an array, using space and newline as separator
	OUTPUT_ARRAY=($OUTPUT)
	
        # getting the last element from the output, which is the time to read and write the model 
	TIME=${OUTPUT_ARRAY[${#OUTPUT_ARRAY[@]}-1]}

	TOTAL_TIME+=${TIME}
	NB_FILES+=1
	
	FILE_NAME=`basename ${file}`
	echo "The time to read and write back ${FILE_NAME} was ${TIME}ms"
    done

    echo "Total time for ${NB_FILES} model(s): ${TOTAL_TIME}ms"

    MEAN=${TOTAL_TIME}/${NB_FILES}
    
    echo "Mean per model: ${MEAN}ms"
else 
    OUTPUT=$(java -client -classpath build/jsbml-*-with-dependencies.jar org.sbml.jsbml.test.PerformanceTest ${INPUT})

    # transform the output of the java program into an array, using space and newline as separator
    OUTPUT_ARRAY=($OUTPUT)
	
    # getting the last element from the output, which is the time to read and write the model 
    TIME=${OUTPUT_ARRAY[${#OUTPUT_ARRAY[@]}-1]}

    FILE_NAME=`basename ${INPUT}`
    echo "The time to read and write back ${FILE_NAME} was ${TIME}ms"
fi

