/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  static = false;}PARSER_BEGIN(FormulaParserLL3)/*
 * $Id$
 * $URL$
 * ----------------------------------------------------------------------------
 * This file is part of JSBML. Please visit <http://sbml.org/Software/JSBML>
 * for the latest version of JSBML and more information about SBML.
 *
 * Copyright (C) 2009-2014 jointly by the following organizations:
 * 1. The University of Tuebingen, Germany
 * 2. EMBL European Bioinformatics Institute (EBML-EBI), Hinxton, UK
 * 3. The California Institute of Technology, Pasadena, CA, USA
 * 4. The University of California, San Diego, La Jolla, CA, USA
 *
 * This library is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation. A copy of the license agreement is provided
 * in the file named "LICENSE.txt" included with this software distribution
 * and also available online as <http://sbml.org/Software/JSBML/License>.
 * ----------------------------------------------------------------------------
 */
package org.sbml.jsbml.text.parser;
import java.io.IOException;import java.util.ArrayList;import java.util.InvalidPropertiesFormatException;import java.util.Properties;import org.sbml.jsbml.ASTNode;import org.sbml.jsbml.ASTNode.Type;import org.sbml.jsbml.resources.Resource;
import org.sbml.jsbml.text.parser.IFormulaParser;
/**
 * Class used to parse infix mathematical formula and returns a representation of it as an Abstract Syntax Tree (AST).
 * <p>
 * Support almost the same syntax as defined in <a href="http://sbml.org/Software/libSBML/docs/java-api/org/sbml/libsbml/libsbml.html#parseL3Formula(java.lang.String)">
 * the LibSBML L3 parser</a>. The things not supported for now are the units associated with numbers.
 *
 * @author Alexander D&ouml;rr
 * @author Nicolas Rodriguez
 * @since 1.0
 * @version $Rev$
 */
public class FormulaParserLL3 implements IFormulaParser{

	public static Properties stringToType = new Properties();

	static	{	  
      String path = "cfg/ASTNodeTokens.xml";
      try
      {
        stringToType.loadFromXML(Resource.class.getResourceAsStream(path));
      }
      catch (InvalidPropertiesFormatException e)
      {
        throw new RuntimeException("Invalid configuration file entries in file " + Resource.class.getResource(path), e);
      }
      catch (IOException e)
      {
        throw new RuntimeException("Could not read configuration file " + Resource.class.getResource(path), e);
      }
	} 
    private void checkSize(ArrayList < ASTNode > arguments, int i) throws ParseException  {    if (arguments.size() > i)    {      throw new ParseException();    }  }  private Integer getInteger(ASTNode node)  {    if (node.isUMinus())    {      if (node.getChild(0).isInteger())      {        return - node.getChild(0).getInteger();      }      else      {        return null;      }    }    else    {      if (node.isInteger())      {        return node.getInteger();      }      else      {        return null;      }    }  }

/**
 * Returns a piecewise {@link ASTNode} representing the modulo operation between the left and right child given.
 *
 * <p/> The fomula produced for 'a % b' or modulo(a, b) is 'piecewise(floor(a/b), gt(a/b, 0), ceil(a/b))'
 *
 * @param leftChild
 * @param rightChild
 * @return a piecewise {@link ASTNode} representing the modulo operation between the left and right child given.
 * @see http://sbml.org/Documents/FAQ#Why_can.27t_I_use_the_.3Crem.3E_operator_in_SBML_MathML.3F
 */
  private ASTNode createModulo(ASTNode leftChild, ASTNode rightChild)
  {
      ASTNode node = new ASTNode(ASTNode.Type.FUNCTION_PIECEWISE);
		
	  ASTNode floorNode = new ASTNode(ASTNode.Type.FUNCTION_FLOOR);
	  ASTNode aDividedByB = new ASTNode(ASTNode.Type.DIVIDE);
	  aDividedByB.addChild(leftChild);
	  aDividedByB.addChild(rightChild);
		
	  floorNode.addChild(aDividedByB);
	  node.addChild(floorNode);
		
	  ASTNode greaterThan = new ASTNode(ASTNode.Type.RELATIONAL_GT);
	  greaterThan.addChild(aDividedByB.clone());
	  greaterThan.addChild(new ASTNode(0));
		
	  node.addChild(greaterThan);
		
	  ASTNode ceilNode = new ASTNode(ASTNode.Type.FUNCTION_CEILING);
	  ceilNode.addChild(aDividedByB.clone());
		
	  node.addChild(ceilNode);

	  return node;	
  }    
  }PARSER_END(FormulaParserLL3)
SKIP :{  " "| "\t"}

TOKEN :{  < INTEGER : (< DIGIT >)+ >}TOKEN :
{
  < DIGIT : [ "0"-"9" ] >
}

TOKEN :{  < NUMBER :    (< DIGIT >)+    (      "." (< DIGIT >)+    )?  | "." (< DIGIT >)+ >}TOKEN :{  < EXPNUMBER : ([ "-" ])? < NUMBER > [ "E", "e" ] ([ "+", "-" ])? < INTEGER > >}TOKEN :{  < SLPITTER : [ "," ] >}TOKEN :{  < PLUS : "+" >}TOKEN :{  < POWER : "^" >}TOKEN :{  < MINUS : "-" >}TOKEN :{  < TIMES : "*" >}TOKEN :{  < DIVIDE : "/" >}
/*
// removed to support the boolean NOT as !TOKEN :{  < FACTORIAL : "!" >}*/

TOKEN :
{
  < MODULO : "%" >
}
TOKEN :{  < OPEN_PAR : "(" >}TOKEN :{  < CLOSE_PAR : ")" >}TOKEN :{  < COMPARISON :
	  "<"
	| "<="
	| ">"
	| ">="
	| "=="
	| "!=" >}TOKEN :{  < BOOLEAN_LOGIC :    < AND >  | < OR >  | < XOR > >}TOKEN :{  < AND :    "And"  | "AND"
  | "&&" >}/*    "and"
  | "or"
    "not"
  | "xor"
    removed to support or(true, false)
 */
TOKEN :{  < OR :    "OR"  | "Or"  | "||" >}TOKEN :{  < XOR :    "XOR"  | "Xor" >}TOKEN :{  < NOT :    "NOT"  | "Not"
  | "!" >}TOKEN :{  < LOG : "log" >}
TOKEN :{  < STRING : (< LETTER > | [ "_" ] )+ (< IDCHAR >)*>}

TOKEN :
{
	< IDCHAR : < LETTER > | < DIGIT > | "_" >
}

TOKEN :
{
	< LETTER : [ "a"-"z", "A"-"Z" ]>
}Token string() :{  Token t;}{  (    t = < LOG >  | t = < STRING >  )  {    return t;  }}TOKEN :{  < EOL :    "\n"  | "\r" >}ASTNode parse() :{  ASTNode node = null;}{  node = Expression()  {    return node;  }}private ASTNode Expression() :{  ASTNode value = null;}{  value = TermLvl1()  (    < EOF >  | < EOL >  )  {    return value;  }}
// TermLvl3, TermLvl2 here to define the operator precedence ???!? Could it be done in one method ??
private ASTNode TermLvl3() :{  ASTNode rightChild;  ASTNode leftChild;  ASTNode node = null;}{  leftChild = Primary()  (    < POWER > rightChild = Primary()    {      node = new ASTNode(Type.POWER);      node.addChild(leftChild);      node.addChild(rightChild);    }/* // removed to support the logical operator NOT '!'

  | < FACTORIAL >    {      node = new ASTNode(Type.FUNCTION_FACTORIAL);      node.addChild(leftChild);    }*/  )*  {    if (node == null)
    {
      node = leftChild;
    }
    
    return node; 
  }}private ASTNode TermLvl2() :{  ASTNode rightChild;  ASTNode leftChild;  ASTNode node = null;}{  leftChild = TermLvl3()  (    < TIMES > rightChild = TermLvl3()    {      node = new ASTNode('*');      node.addChild(leftChild);      node.addChild(rightChild);    }  | < DIVIDE > rightChild = TermLvl3()    {      Integer left, right;      left = getInteger(leftChild);      right = getInteger(rightChild);      if (left != null && right != null)      {        node = new ASTNode();        node.setValue(left, right);      }      else      {        node = new ASTNode('/');        node.addChild(leftChild);        node.addChild(rightChild);      }    }
  |  < MODULO > rightChild = TermLvl3()
    {
      node = createModulo(leftChild, rightChild);
    }      )*  {
    if (node == null)
    {      node = leftChild;
    }
        return node;   }}private ASTNode TermLvl1() :{  ASTNode rightChild = null;  ASTNode leftChild;  ASTNode node = null;  Token t;  String s;  Type type = null;}{  leftChild = TermLvl2()  (    < PLUS > rightChild = TermLvl2()    {      node = new ASTNode('+');      node.addChild(leftChild);      node.addChild(rightChild);    }  | < MINUS > rightChild = TermLvl2()    {      node = new ASTNode('-');      node.addChild(leftChild);      node.addChild(rightChild);    }  | t = < BOOLEAN_LOGIC > rightChild = TermLvl2()    {      s = t.image;      if (s.equalsIgnoreCase("or") || s.equalsIgnoreCase("||"))      {        type = ASTNode.Type.LOGICAL_OR;      }      else if (s.equalsIgnoreCase("and") || s.equalsIgnoreCase("&&"))      {        type = ASTNode.Type.LOGICAL_AND;      }      else if (s.equalsIgnoreCase("xor"))      {        type = ASTNode.Type.LOGICAL_XOR;      }      node = new ASTNode(type);      node.addChild(leftChild);      node.addChild(rightChild);    }  | t = < COMPARISON > rightChild = TermLvl2()    {      s = t.image;      if (s.equalsIgnoreCase("<"))      {        type = ASTNode.Type.RELATIONAL_LT;      }      else if (s.equalsIgnoreCase(">"))      {        type = ASTNode.Type.RELATIONAL_GT;      }      else if (s.equalsIgnoreCase("=="))      {        type = ASTNode.Type.RELATIONAL_EQ;      }      else if (s.equalsIgnoreCase("!="))      {        type = ASTNode.Type.RELATIONAL_NEQ;      }      else if (s.equalsIgnoreCase(">="))      {        type = ASTNode.Type.RELATIONAL_GEQ;      }      else if (s.equalsIgnoreCase("<="))      {        type = ASTNode.Type.RELATIONAL_LEQ;      }      node = new ASTNode(type);      node.addChild(leftChild);      node.addChild(rightChild);    }  )*  {    if (node == null)
    {
      node = leftChild;
    }
    
    return node; 
  }}private ASTNode Primary() throws NumberFormatException :{  Token t;  double d;  int i;  ASTNode node = new ASTNode();  ASTNode child, furtherChild;  String s;  String vals [ ];  ArrayList < ASTNode > arguments = new ArrayList < ASTNode > ();}{  t = < INTEGER >  {    i = Integer.parseInt(t.image); // Could use StringTools.parseXXX methods here but not doing so allow to support different locale ??    node.setValue(i);    return node;  }| t = < NUMBER >  {    d = Double.parseDouble(t.image);     node.setValue(d);    return node;  }| t = < EXPNUMBER >  {    s = t.image;    vals = s.toLowerCase().split("e");    if (vals [ 1 ].startsWith("+"))    {      i = Integer.parseInt(vals [ 1 ].substring(1));    }    else    {      i = Integer.parseInt(vals [ 1 ]);    }    node.setValue(Double.parseDouble(vals [ 0 ]), i);    return node;  }| LOOKAHEAD(2)  t = string() < OPEN_PAR > child = TermLvl1()  (    < SLPITTER > furtherChild = TermLvl1()    {      arguments.add(furtherChild);    }  )*  < CLOSE_PAR >  {    s = t.image;    Type type = null;
    if (stringToType.containsKey(s.toLowerCase()))    {      type = ASTNode.Type.valueOf(stringToType.getProperty(s.toLowerCase()).toUpperCase());    }    if (s.equalsIgnoreCase("pow") || s.equalsIgnoreCase("power"))    {      checkSize(arguments, 1);      node.addChild(child);    }    else if (s.equalsIgnoreCase("sqr"))    {      checkSize(arguments, 0);      node.addChild(child);      node.addChild(new ASTNode(2));    }    else if (s.equalsIgnoreCase("sqrt"))    {      checkSize(arguments, 0);      node.addChild(new ASTNode(2));      node.addChild(child);    }    else if (s.equalsIgnoreCase("not"))    {      checkSize(arguments, 0);      node.addChild(child);      type = Type.LOGICAL_NOT;    }    else if (s.equalsIgnoreCase("ln"))    {      checkSize(arguments, 0);      node.addChild(child);      type = Type.FUNCTION_LN;    }    else if (s.equalsIgnoreCase("lambda"))    {      node.addChild(child);      type = Type.LAMBDA;    }    else if (s.equalsIgnoreCase("piecewise"))    {      node.addChild(child);      type = Type.FUNCTION_PIECEWISE;    }
    else if (s.equalsIgnoreCase("modulo") || s.equalsIgnoreCase("mod"))
    {
      checkSize(arguments, 1);
      ASTNode rightChild = arguments.get(0);
      arguments.clear();
      
	  node = createModulo(child, rightChild);
	  return node;
    }    else    {      node.addChild(child);    }    if (type != null)    {      node.setType(type);    }    else    {      node.setName(s);    }    for (ASTNode argument : arguments)    {      node.addChild(argument);    }    return node;  }| < OPEN_PAR > node = TermLvl1() < CLOSE_PAR >  {    return node;  }| < MINUS > node = Primary()  {    ASTNode uiMinus = new ASTNode('-');    uiMinus.addChild(node);    return uiMinus;  }| < NOT > node = TermLvl1()  {    ASTNode not = new ASTNode(Type.LOGICAL_NOT);    not.addChild(node);    return not;  }| < LOG > child = Primary()  {    node = new ASTNode(Type.FUNCTION_LN);    node.addChild(child);    return node;  }| t = < STRING >  {    s = t.image;    if (s.equalsIgnoreCase("true"))    {      node = new ASTNode(Type.CONSTANT_TRUE);    }    else if (s.equalsIgnoreCase("false"))    {      node = new ASTNode(Type.CONSTANT_FALSE);    }    else if (s.equalsIgnoreCase("pi"))    {      node = new ASTNode(Type.CONSTANT_PI);    }    else if (s.equalsIgnoreCase("avogadro"))    {      node = new ASTNode(Type.NAME_AVOGADRO);    }    else if (s.equalsIgnoreCase("time"))    {      node = new ASTNode(Type.NAME_TIME);    }    else if (s.equalsIgnoreCase("exponentiale"))    {      node = new ASTNode(Type.CONSTANT_E);    }    else if (s.equalsIgnoreCase("-infinity") || s.equalsIgnoreCase("-INF"))    {      node = new ASTNode(Double.NEGATIVE_INFINITY);    }    else if (s.equalsIgnoreCase("infinity") || s.equalsIgnoreCase("INF"))    {      node = new ASTNode(Double.POSITIVE_INFINITY);    }
    else if (s.equalsIgnoreCase("NotANumber") || s.equalsIgnoreCase("NaN"))
    {
      node = new ASTNode(Double.NaN);
    }    else    {      node = new ASTNode(s);    }    return node;  }

}
